# --- Introduction ---
# 
# This file contains all the configuration options for the Netanol project.
# This does not configure which services are run, but rather how they are run.
#
# These configurations are meant to be overwritten in certain environments,
# such as production or development. The default values are set to be used in
# a production environment wherein all services run in the same docker network.

# Before running the application make sure to configure and fill in the following 
# sensitive variables
# FENNEC_PASSWORD, FENNEC_JWT_SECRET

# --- Docker configuration ---
# Sets the name of the Docker project
COMPOSE_PROJECT_NAME=netanol

# --- Fennec configuration ---
# Set the ASP.NET running environment
FENNEC_ENVIRONMENT=Production
# Enable the Swagger UI in /api/swagger
FENNEC_SWAGGER=false
# Allow CORS for the API
FENNEC_CORS=true

# Upon startup, Fennec will check if any user with this username exists.
# If not, it will create a new administrator account with the following credentials.
FENNEC_INITIAL_USERNAME=netanol
# The password must fulfill all of the following requirements.
# Fennec will fail to start if it to use an invalid password to create the administrator account.
# - At least 8 characters
# - At least 1 lowercase letter
# - At least 1 uppercase letter
# - At least 1 number
# - At least 1 special character
FENNEC_INITIAL_PASSWORD=

# --- Nginx configuration ---
# Sets the target host and port for where the Fennec API is running
# When Fennect is running in a Docker container, use the name of the container `fennec`
# When Fennec is running on the host machine, use `host.docker.internal`
NGINX_FENNEC=fennec:80
# Sets the target host and port for where the Astrapia frontend is running
# When Astrapia is running in a Docker container, use the name of the container `astrapia`
# When Astrapia is running on the host machine, use `host.docker.internal`
NGINX_ASTRAPIA=astrapia:3000
# Sets the target host and port for where the Grafana frontend is running
# When Grafana is running in a Docker container, use the name of the container `grafana`
# When Grafana is running on the host machine, use `host.docker.internal`
NGINX_GRAFANA=grafana:3000
# Sets the target host and port for where the Prometheus is running
# When Prometheus is running in a Docker container, use the name of the container `grafana`
# NGINX_PROMETHEUS=prometheus:9090
# Sets on which interface the Nginx server should listen
# Using `127.0.0.1` will only allow connections from the host machine
# Using `0.0.0.0` will allow connections from anywhere
NGINX_EXPOSED_ADDRESS=127.0.0.1

# --- Elastic configuration ---
# Sets the password for the elastic user (at least 6 characters)
ELASTIC_PASSWORD=ofQVYQ7Z

# --- Replay configuration ---
# Which example file to replay (names are converted into lowercase). 
REPLAY_FILE=netflow9-1.pcap
# Configure the address and port of the target host to replay the data to
# Use `host.docker.internal` to replay to the host machine
# Use `fennec` to replay to the Fennec container
# Configure Fennec in appsettings.json to listen on the same port
REPLAY_TARGET=fennec:2055
# Configure the time between each packet in seconds fractions (e.g 0.5) are allowed
REPLAY_SPEED=1

# --- Grafana configuration ---
# Sets the user and password with which the user can log in to Grafana
# Password can not be empty or null 
GRAFANA_USERNAME=netanol
GRAFANA_PASSWORD=
# Sets the url via which it can be reached behind nginx
GRAFANA_ROOT_URL=http://$NGINX_EXPOSED_ADDRESS/grafana/
GRAFANA_SERVE_SUB_PATH=true

# --- Prometheus configuration --- WIP
# Sets the url via which it can be reached behind nginx
# PROMETHEUS_SERVER_URL=http://$NGINX_EXPOSED_ADDRESS/prometheus