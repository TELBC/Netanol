using System.Net;
using System.Net.Sockets;
using Fennec.Parsers;
using Fennec.Services;
using NSubstitute;
using Serilog;

namespace Fennec.Tests.Parsers;

public class IpFixParserTests
{
    [Fact]
    public void ParseIpfixMessage()
    {
        // Arrange
        var substituteLogger = Substitute.For<ILogger>();
        var substituteMetricService = Substitute.For<IMetricService>();

        var parser = new IpFixParser(substituteLogger, substituteMetricService);
        var ipfixTemplates = Convert.FromBase64String(
            "AAoFgGUlYdkB1iL/AAAAAAACA3wBAAAVAAgABAAMAAQAAQAIAAIACACYAAgAmQAIAAcAAgALAAIACgAEAA4ABAFfAAgABAABAIgAAQAGAAEABQABADUAAQA9AAGDegACAAAa3IN4AAIAABrcg3kAAQAAGtwA0gABAQEAEgAIAAQADAAEAAEACAACAAgAmAAIAJkACAAKAAQADgAEAAQAAQCIAAEABQABADUAAQA9AAEBXwAIg3oAAgAAGtyDeAACAAAa3IN5AAEAABrcANIAAgECABUAGwAQABwAEAABAAgAAgAIAJgACACZAAgABwACAAsAAgAKAAQADgAEAV8ACAAEAAEAiAABAAYAAQAFAAEANQABAD0AAYN6AAIAABrcg3gAAgAAGtyDeQABAAAa3ADSAAEBAwASABsAEAAcABAAAQAIAAIACACYAAgAmQAIAAoABAAOAAQABAABAIgAAQAFAAEANQABAD0AAQFfAAiDegACAAAa3IN4AAIAABrcg3kAAQAAGtwA0gACAQQAGQAIAAQADAAEAAEACAACAAgAmAAIAJkACAAHAAIACwACAAoABAAOAAQABAABAIgAAQAGAAEABQABADUAAQA9AAEBXwAIg3EABAAAGtyDcgAEAAAa3IN2AAIAABrcg3cAAgAAGtyDcAABAAAa3IN6AAIAABrcg3gAAgAAGtyDeQABAAAa3AEFABcACAAEAAwABAABAAgAAgAIAJgACACZAAgABwACAAsAAgAKAAQADgAEAAQAAQCIAAEABQABADUAAQA9AAEBXwAIg3EABAAAGtyDcgAEAAAa3INwAAEAABrcg3oAAgAAGtyDeAACAAAa3IN5AAEAABrcANIAAQEGABkACAAEAAwABAABAAgAAgAIAJgACACZAAgABwACAAsAAgAKAAQADgAEAAQAAQCIAAEABgABAAUAAQA1AAEAPQABAV8ACINzABAAABrcg3QAEAAAGtyDdgACAAAa3IN3AAIAABrcg3AAAQAAGtyDegACAAAa3IN4AAIAABrcg3kAAQAAGtwBBwAXAAgABAAMAAQAAQAIAAIACACYAAgAmQAIAAcAAgALAAIACgAEAA4ABAAEAAEABQABADUAAQA9AAEAiAABAV8ACINzABAAABrcg3QAEAAAGtyDcAABAAAa3IN6AAIAABrcg3gAAgAAGtyDeQABAAAa3ADSAAEAAgDMAQgAFQAIAAQADAAEAAEACAACAAgAmAAIAJkACAAHAAIACwACAAoABAAOAAQBXwAIAAQAAQCIAAEABgABAAUAAQA1AAEAPQABg3oAAgAAGtyDeAACAAAa3IN5AAEAABrcANIAAQEJABUAGwAQABwAEAABAAgAAgAIAJgACACZAAgABwACAAsAAgAKAAQADgAEAV8ACAAEAAEAiAABAAYAAQAFAAEANQABAD0AAYN6AAIAABrcg3gAAgAAGtyDeQABAAAa3ADSAAEAAgDMAQoAFQAIAAQADAAEAAEACAACAAgAmAAIAJkACAAHAAIACwACAAoABAAOAAQBXwAIAAQAAQCIAAEABgABAAUAAQA1AAEAPQABg3oAAgAAGtyDeAACAAAa3IN5AAEAABrcANIAAQELABUAGwAQABwAEAABAAgAAgAIAJgACACZAAgABwACAAsAAgAKAAQADgAEAV8ACAAEAAEAiAABAAYAAQAFAAEANQABAD0AAYN6AAIAABrcg3gAAgAAGtyDeQABAAAa3ADSAAEAAgBcAQwAEgAIAAQADAAEAAEACAACAAgAmAAIAJkACAAKAAQADgAEAAQAAQCIAAEABQABADUAAQA9AAEBXwAIg3oAAgAAGtyDeAACAAAa3IN5AAEAABrcANIAAg==");
        var ipfixData = Convert.FromBase64String(
            "AAoFcGUlYdgB0VA9AAAAAAEIA/SsE1F7rBNRbwAAAAAAAAAoAAAAAAAAAAEAAAGLGgX5KAAAAYsaBfkoOzYAWAAAABwAAAAZAAAAAAAAAAAGAQQAQAEAAgABAACsE1F7rBNRbwAAAAAAAAAoAAAAAAAAAAEAAAGLGgX5KAAAAYsaBfkoOzYAWAAAABwAAAAAAAAAAAAAAAAGAQQAQAAAAgAAAACsE1FvrBNRewAAAAAAAAAoAAAAAAAAAAEAAAGLGgX5KAAAAYsaBfkoAFg7NgAAABkAAAAcAAAAAAAAAAAGARQAgAEAAQACAACsE1F7rBNRbwAAAAAAAAA0AAAAAAAAAAEAAAGLGgX5KAAAAYsaBfkoOzYAWAAAABwAAAAZAAAAAAAAAAAGAREAQAEAAgABAACsE1F7rBNRbwAAAAAAAAA0AAAAAAAAAAEAAAGLGgX5KAAAAYsaBfkoOzYAWAAAABwAAAAAAAAAAAAAAAAGAREAQAAAAgAAAACsE1FvrBNRewAAAAAAAABLAAAAAAAAAAEAAAGLGgX5KAAAAYsaBfkoAFg7NgAAABkAAAAcAAAAAAAAAAAGARgAgAEAAQACAACsE1FvrBNRewAAAAAAAAYQAAAAAAAAAAIAAAGLGgX5KAAAAYsaBfkoAFg7NgAAABkAAAAcAAAAAAAAAAAGARAAgAEAAQACAACsE1F7rBNRbwAAAAAAAAEuAAAAAAAAAAEAAAGLGgX5KAAAAYsaBfkoOzYAWAAAABwAAAAZAAAAAAAAAAAGARgAQAEAAgABAACsE1F7rBNRbwAAAAAAAAEuAAAAAAAAAAEAAAGLGgX5KAAAAYsaBfkoOzYAWAAAABwAAAAAAAAAAAAAAAAGARgAQAAAAgAAAACsE1F7rBNRbwAAAAAAAABoAAAAAAAAAAIAAAGLGgX5KAAAAYsaBfkoOzYAWAAAABwAAAAZAAAAAAAAAAAGARAAQAEAAgABAACsE1F7rBNRbwAAAAAAAABoAAAAAAAAAAIAAAGLGgX5KAAAAYsaBfkoOzYAWAAAABwAAAAAAAAAAAAAAAAGARAAQAAAAgAAAACsE1FvrBNRewAAAAAAAAA8AAAAAAAAAAEAAAGLGgX5KAAAAYsaBfkoAFg7NgAAABkAAAAcAAAAAAAAAAAGARIAgAEAAQACAACsE1F7rBNRbwAAAAAAAAA8AAAAAAAAAAEAAAGLGgX5KAAAAYsaBfkoOzYAWAAAABwAAAAZAAAAAAAAAAAGAcIAQAEAAgABAACsE1F7rBNRbwAAAAAAAAA8AAAAAAAAAAEAAAGLGgX5KAAAAYsaBfkoOzYAWAAAABwAAAAAAAAAAAAAAAAGAcIAQAAAAgAAAAABCgFsrBNRb6wTUXsAAAAAAAAAjQAAAAAAAAABAAABixoF+SgAAAGLGgX5KAA10+oAAAAZAAAAHAAAAAAAAAAAEQEAAIABAAEAAgAArBNRb6wTUXsAAAAAAAAAjQAAAAAAAAABAAABixoF+SgAAAGLGgX5KAA12MYAAAAZAAAAHAAAAAAAAAAAEQEAAIABAAEAAgAArBNRb6wTUXsAAAAAAAAAgQAAAAAAAAABAAABixoF+SgAAAGLGgX5KAA14DgAAAAZAAAAHAAAAAAAAAAAEQEAAIABAAEAAgAArBNRb6wTUXsAAAAAAAAAjQAAAAAAAAABAAABixoF+SgAAAGLGgX5KAA15ooAAAAZAAAAHAAAAAAAAAAAEQEAAIABAAEAAgAArBNRe6wTUW8AAAAAAAAATQAAAAAAAAABAAABixoF+SgAAAGLGgX5KOaKADUAAAAcAAAAGQAAAAAAAAAAEQEAAEABAAIAAQAA");

        var templatesUdpReceiveResult =
            new UdpReceiveResult(ipfixTemplates, new IPEndPoint(IPAddress.Parse("127.0.0.1"), 0));
        var dataUdpReceiveResult = new UdpReceiveResult(ipfixData, new IPEndPoint(IPAddress.Parse("127.0.0.1"), 0));

        // Act
        var templates = parser.Parse(templatesUdpReceiveResult);
        var data = parser.Parse(dataUdpReceiveResult).ToList();

        // Assert
        Assert.NotNull(templates);
        Assert.NotNull(data);

        Assert.Empty(templates);
        Assert.Equal(14, data.Count);
        Assert.Equal((ulong)40, data.First().ByteCount);
    }
}